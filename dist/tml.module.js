var r=new global.Go;WebAssembly.instantiateStreaming||(WebAssembly.instantiateStreaming=function(r,t){try{return Promise.resolve(r).then(function(r){return Promise.resolve(r.arrayBuffer()).then(function(r){return Promise.resolve(WebAssembly.instantiate(r,t))})})}catch(r){return Promise.reject(r)}});var t=new Error("WASM module is not ready yet"),e=function(){};function n(r,e){if(!("TML_parse"in global))throw t;var n=TML_parse(r,e);if(void 0!==n.Error)throw new Error(n.Error());return n}function i(){if(!("TML_withDefaultConfig"in global))throw t;return TML_withDefaultConfig(input,conf)}"TML_parse"in global||function(t){try{return Promise.resolve(function(t,e){try{var n=Promise.resolve(WebAssembly.instantiateStreaming(fetch("https://cdn.jsdelivr.net/gh/yanishoss/tml/bin/main.wasm"),r.importObject)).then(function(t){return Promise.resolve(r.run(t.instance)).then(function(){})})}catch(r){return e(r)}return n&&n.then?n.then(void 0,e):n}(0,function(r){throw r}))}catch(r){return Promise.reject(r)}}().then(function(){}).catch(function(r){throw r});export{e as onReady,n as parse,i as withDefaultConfig};
//# sourceMappingURL=tml.module.js.map
